package com.opensimulationplatform.core.validation.variablegroup.$PACKAGE_NAME$;

import com.opensimulationplatform.core.model.modeldescription.ModelDescription;
import com.opensimulationplatform.core.model.modeldescription.Variable;
import com.opensimulationplatform.core.model.modeldescription.variablegroup.$EFFORT_PACKAGE_NAME$.$EFFORT_CORE_MODEL_CLASS_NAME$;
import com.opensimulationplatform.core.model.modeldescription.variablegroup.$PACKAGE_NAME$.$CORE_MODEL_CLASS_NAME$;
import com.opensimulationplatform.core.model.modeldescription.variablegroup.$FLOW_PACKAGE_NAME$.$FLOW_CORE_MODEL_CLASS_NAME$;
import com.opensimulationplatform.core.validation.ValidationDiagnostic;
import org.junit.Test;

import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class $CLASS_NAME$ {
  @Test
  public void invalid() {
    ModelDescription modelDescription = new ModelDescription();

    Variable v1 = new Variable();
    v1.setCausality(Variable.Causality.OUTPUT);
    $EFFORT_CORE_MODEL_CLASS_NAME$ $EFFORT_CORE_MODEL_CLASS_NAME_CAMEL_CASE$ = new $EFFORT_CORE_MODEL_CLASS_NAME$();
    $EFFORT_CORE_MODEL_CLASS_NAME_CAMEL_CASE$.setVariables(Arrays.asList(v1));

    Variable v2 = new Variable();
    v2.setCausality(Variable.Causality.OUTPUT);
    $FLOW_CORE_MODEL_CLASS_NAME$ $FLOW_CORE_MODEL_CLASS_NAME_CAMEL_CASE$ = new $FLOW_CORE_MODEL_CLASS_NAME$();
    $FLOW_CORE_MODEL_CLASS_NAME_CAMEL_CASE$.setVariables(Arrays.asList(v2));

    $CORE_MODEL_CLASS_NAME$ $CORE_MODEL_CLASS_NAME_CAMEL_CASE$ = new $CORE_MODEL_CLASS_NAME$();
    $CORE_MODEL_CLASS_NAME_CAMEL_CASE$.set$EFFORT_CORE_MODEL_CLASS_NAME$($EFFORT_CORE_MODEL_CLASS_NAME_CAMEL_CASE$);
    $CORE_MODEL_CLASS_NAME_CAMEL_CASE$.set$FLOW_CORE_MODEL_CLASS_NAME$($FLOW_CORE_MODEL_CLASS_NAME_CAMEL_CASE$);

    modelDescription.get$CORE_MODEL_CLASS_NAME$s().add($CORE_MODEL_CLASS_NAME_CAMEL_CASE$);

    $CORE_MODEL_CLASS_NAME$Validator $CORE_MODEL_CLASS_NAME_CAMEL_CASE$Validator = new $CORE_MODEL_CLASS_NAME$Validator();
    List<ValidationDiagnostic<$CORE_MODEL_CLASS_NAME$>> diagnostics = $CORE_MODEL_CLASS_NAME_CAMEL_CASE$Validator.validate(modelDescription);

    assertEquals(1, diagnostics.size());
    assertEquals($CORE_MODEL_CLASS_NAME_CAMEL_CASE$, diagnostics.get(0).getValidatedObject());
  }

  @Test
  public void valid() {
    ModelDescription modelDescription = new ModelDescription();

    Variable v1 = new Variable();
    v1.setCausality(Variable.Causality.OUTPUT);
    $EFFORT_CORE_MODEL_CLASS_NAME$ $EFFORT_CORE_MODEL_CLASS_NAME_CAMEL_CASE$ = new $EFFORT_CORE_MODEL_CLASS_NAME$();
    $EFFORT_CORE_MODEL_CLASS_NAME_CAMEL_CASE$.setVariables(Arrays.asList(v1));

    Variable v2 = new Variable();
    v2.setCausality(Variable.Causality.INPUT);
    $FLOW_CORE_MODEL_CLASS_NAME$ $FLOW_CORE_MODEL_CLASS_NAME_CAMEL_CASE$ = new $FLOW_CORE_MODEL_CLASS_NAME$();
    $FLOW_CORE_MODEL_CLASS_NAME_CAMEL_CASE$.setVariables(Arrays.asList(v2));

    $CORE_MODEL_CLASS_NAME$ $CORE_MODEL_CLASS_NAME_CAMEL_CASE$ = new $CORE_MODEL_CLASS_NAME$();
    $CORE_MODEL_CLASS_NAME_CAMEL_CASE$.set$EFFORT_CORE_MODEL_CLASS_NAME$($EFFORT_CORE_MODEL_CLASS_NAME_CAMEL_CASE$);
    $CORE_MODEL_CLASS_NAME_CAMEL_CASE$.set$FLOW_CORE_MODEL_CLASS_NAME$($FLOW_CORE_MODEL_CLASS_NAME_CAMEL_CASE$);

    modelDescription.get$CORE_MODEL_CLASS_NAME$s().add($CORE_MODEL_CLASS_NAME_CAMEL_CASE$);

    $CORE_MODEL_CLASS_NAME$Validator $CORE_MODEL_CLASS_NAME_CAMEL_CASE$Validator = new $CORE_MODEL_CLASS_NAME$Validator();
    List<ValidationDiagnostic<$CORE_MODEL_CLASS_NAME$>> diagnostics = $CORE_MODEL_CLASS_NAME_CAMEL_CASE$Validator.validate(modelDescription);

    assertTrue(diagnostics.isEmpty());
  }
}
